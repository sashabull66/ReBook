{"ast":null,"code":"const initialState = {\n  bookList: {\n    books: [],\n    loading: true,\n    error: null\n  },\n  shoppingCart: {\n    cartItems: [],\n    orderTotal: 0,\n    cartItemsTotal: 0\n  }\n};\n\nconst updateCartItems = (cartItems, item, index) => {\n  if (index === -1) {\n    return [...cartItems, item];\n  }\n\n  return [...cartItems.slice(0, index), item, ...cartItems.slice(++index)];\n};\n\nconst updateCartItem = (book, item = {}) => {\n  const {\n    id = book.id,\n    name = book.name,\n    count = 0,\n    total = 0\n  } = item;\n  return {\n    id,\n    name,\n    count: count + 1,\n    total: book.price + total\n  };\n};\n\nconst updateOrderTotal = cartItems => {\n  return cartItems.reduce((finish, element) => finish + element.total, 0);\n};\n\nconst updateCartItemsCountTotal = cartItems => {\n  return cartItems.reduce((finish, element) => finish + element.count, 0);\n};\n\nconst updateBookList = (state, action) => {\n  if (state) switch (action.type) {\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_REQUEST':\n      return {\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state.bookList;\n  }\n};\n\nconst updateShoppingCart = (state = initialState.shoppingCart, action) => {\n  if (state === undefined) {\n    return {\n      cartItems: [],\n      orderTotal: 0,\n      cartItemsTotal: 0\n    };\n  }\n\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART':\n      const {\n        bookList: {\n          books\n        },\n        shoppingCart: {\n          cartItems\n        }\n      } = state;\n      const ID = action.payload; // clicked id\n\n      const currentBook = books.find(book => book.id === ID); // book from list\n\n      const isBookInCartIndex = cartItems.findIndex(book => book.id === ID); // >0 || -1\n\n      const bookInCart = cartItems[isBookInCartIndex]; // index || undefined\n\n      const data = updateCartItem(currentBook, bookInCart);\n      const newList = updateCartItems(cartItems, data, isBookInCartIndex);\n      return {\n        cartItems: newList,\n        orderTotal: updateOrderTotal(newList),\n        cartItemsTotal: updateCartItemsCountTotal(newList)\n      };\n\n    case 'BOOKS_DELETED_FROM_CART':\n      const booksID = action.payload; // clicked id\n\n      const newCartList = state.shoppingCart.cartItems.filter(({\n        id\n      }) => id !== booksID);\n      return {\n        cartItems: newCartList,\n        orderTotal: updateOrderTotal(newCartList),\n        cartItemsTotal: updateCartItemsCountTotal(newCartList)\n      };\n\n    case 'BOOK_DELETED_FROM_CART':\n      const bookID = action.payload; // clicked id\n\n      let newCarts = [...state.shoppingCart.cartItems];\n      const deletedBooksGroup = newCarts.find(({\n        id\n      }) => id === bookID);\n      const getCount = deletedBooksGroup.count - 1;\n      let getTotal;\n\n      if (getCount === 0) {\n        newCarts = newCarts.filter(({\n          id\n        }) => id !== bookID);\n      } else {\n        getTotal = deletedBooksGroup.total / deletedBooksGroup.count;\n        deletedBooksGroup.count = getCount;\n        deletedBooksGroup.total -= getTotal;\n      }\n\n      return {\n        cartItems: newCarts,\n        orderTotal: updateOrderTotal(newCarts),\n        cartItemsTotal: updateCartItemsCountTotal(newCarts)\n      };\n\n    default:\n      return state.shoppingCart;\n  }\n};\n\nexport const reducer = (state, action) => {\n  return {\n    bookList: updateBookList(state, action),\n    shoppingCart: updateShoppingCart(state, action)\n  };\n};","map":{"version":3,"sources":["/home/user/Рабочий стол/redux-sandbox/src/reducers/index.js"],"names":["initialState","bookList","books","loading","error","shoppingCart","cartItems","orderTotal","cartItemsTotal","updateCartItems","item","index","slice","updateCartItem","book","id","name","count","total","price","updateOrderTotal","reduce","finish","element","updateCartItemsCountTotal","updateBookList","state","action","type","payload","updateShoppingCart","undefined","ID","currentBook","find","isBookInCartIndex","findIndex","bookInCart","data","newList","booksID","newCartList","filter","bookID","newCarts","deletedBooksGroup","getCount","getTotal","reducer"],"mappings":"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","sourcesContent":["const initialState = {\n    bookList: {\n        books: [],\n        loading: true,\n        error: null,\n    },\n\n    shoppingCart: {\n        cartItems: [],\n        orderTotal: 0,\n        cartItemsTotal: 0\n    }\n}\n\nconst updateCartItems = (cartItems, item, index) => {\n    if (index === -1) {\n        return [\n            ...cartItems,\n            item\n        ]\n    }\n    return [\n        ...cartItems.slice(0, index),\n        item,\n        ...cartItems.slice(++index)\n    ]\n}\nconst updateCartItem = (book, item = {}) => {\n    const {id = book.id, name = book.name, count = 0, total = 0} = item\n    return {\n        id,\n        name,\n        count: count + 1,\n        total: book.price + total,\n    }\n}\nconst updateOrderTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.total, 0)\n}\nconst updateCartItemsCountTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.count, 0)\n}\n\nconst updateBookList = (state, action) => {\n    if (state)\n    switch (action.type) {\n        case 'FETCH_BOOKS_SUCCESS' :\n            return {\n                books: action.payload,\n                loading: false,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_REQUEST' :\n            return {\n                books: [],\n                loading: true,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_FAILURE' :\n            return {\n                books: [],\n                loading: false,\n                error: action.payload\n            }\n\n        default:\n            return state.bookList\n    }\n}\nconst updateShoppingCart = (state = initialState.shoppingCart, action) => {\nif (state === undefined) {\n    return {\n        cartItems: [],\n        orderTotal: 0,\n        cartItemsTotal: 0\n    }\n}\n\n    switch (action.type) {\n        case 'BOOK_ADDED_TO_CART' :\n            const {bookList:{books}, shoppingCart:{cartItems}} = state\n            const ID = action.payload; // clicked id\n            const currentBook = books.find(book => book.id === ID) // book from list\n            const isBookInCartIndex = cartItems.findIndex(book => book.id === ID) // >0 || -1\n            const bookInCart = cartItems[isBookInCartIndex] // index || undefined\n            const data = updateCartItem(currentBook, bookInCart)\n            const newList = updateCartItems(cartItems, data, isBookInCartIndex)\n            return {\n                cartItems: newList,\n                orderTotal: updateOrderTotal(newList),\n                cartItemsTotal: updateCartItemsCountTotal(newList)\n            }\n\n        case 'BOOKS_DELETED_FROM_CART' :\n            const booksID = action.payload; // clicked id\n            const newCartList = state.shoppingCart.cartItems.filter(({id}) => id !== booksID);\n            return {\n                cartItems: newCartList,\n                orderTotal: updateOrderTotal(newCartList),\n                cartItemsTotal: updateCartItemsCountTotal(newCartList)\n            }\n\n        case 'BOOK_DELETED_FROM_CART' :\n            const bookID = action.payload; // clicked id\n            let newCarts = [...state.shoppingCart.cartItems]\n            const deletedBooksGroup = newCarts.find(({id}) => id === bookID)\n            const getCount = deletedBooksGroup.count - 1;\n            let getTotal;\n            if (getCount === 0) {\n                newCarts = newCarts.filter(({id}) => id !== bookID)\n            } else {\n                getTotal = deletedBooksGroup.total / deletedBooksGroup.count\n                deletedBooksGroup.count = getCount\n                deletedBooksGroup.total -= getTotal\n            }\n            return {\n                cartItems: newCarts,\n                orderTotal: updateOrderTotal(newCarts),\n                cartItemsTotal: updateCartItemsCountTotal(newCarts)\n            }\n\n        default : return state.shoppingCart\n    }\n}\n\nexport const reducer = (state, action) => {\n\n            return {\n                bookList: updateBookList(state, action),\n                shoppingCart: updateShoppingCart(state, action)\n            }\n\n}"]},"metadata":{},"sourceType":"module"}