{"ast":null,"code":"/*const initialState = {\n    books: [],\n    loading: true,\n    error: null,\n    cartItems: [],\n    orderTotal: 0,\n    cartItemsTotal: 0\n}\n\nconst updateCartItems = (cartItems, item, index) => {\n    if (index === -1) {\n        return [\n            ...cartItems,\n            item\n        ]\n    }\n    return [\n        ...cartItems.slice(0, index),\n        item.count > 0 && item,\n        ...cartItems.slice(++index)\n    ]\n}\n\nconst updateCartItem = (book, item = {}) => {\n    const {id = book.id, name = book.name, count = 0, total = 0} = item\n    return {\n        id,\n        name,\n        count: count + 1,\n        total: book.price + total,\n    }\n}\n\nconst updateOrderTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.total, 0)\n}\n\nconst updateCartItemsCountTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.count, 0)\n}*/\n\n/*export const reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case 'FETCH_BOOKS_SUCCESS' :\n            return {\n                ...state,\n                books: action.payload,\n                loading: false,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_REQUEST' :\n            return {\n                ...state,\n                books: [],\n                loading: true,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_FAILURE' :\n            return {\n                ...state,\n                books: [],\n                loading: false,\n                error: action.payload\n            }\n\n        case 'BOOK_ADDED_TO_CART' :\n            const ID = action.payload; // clicked id\n            const currentBook = state.books.find(book => book.id === ID) // book from list\n            const isBookInCartIndex = state.cartItems.findIndex(book => book.id === ID) // >0 || -1\n            const bookInCart = state.cartItems[isBookInCartIndex] // index || undefined\n            const data = updateCartItem(currentBook, bookInCart)\n            const newList = updateCartItems(state.cartItems, data, isBookInCartIndex)\n            return {\n                ...state,\n                cartItems: newList,\n                orderTotal: updateOrderTotal(newList),\n                cartItemsTotal: updateCartItemsCountTotal(newList)\n            }\n\n        case 'BOOKS_DELETED_FROM_CART' :\n            const booksID = action.payload; // clicked id\n            const newCartList = state.cartItems.filter(({id}) => id !== booksID);\n            return {\n                ...state,\n                cartItems: newCartList,\n                orderTotal: updateOrderTotal(newCartList),\n                cartItemsTotal: updateCartItemsCountTotal(newCartList)\n            }\n\n        case 'BOOK_DELETED_FROM_CART' :\n            const bookID = action.payload; // clicked id\n            let newCarts = [...state.cartItems]\n            const deletedBooksGroup = newCarts.find(({id}) => id === bookID)\n            const getCount = deletedBooksGroup.count - 1;\n            let getTotal;\n            if (getCount === 0) {\n                newCarts = newCarts.filter(({id}) => id !== bookID)\n            } else {\n                getTotal = deletedBooksGroup.total / deletedBooksGroup.count\n                deletedBooksGroup.count = getCount\n                deletedBooksGroup.total -= getTotal\n            }\n            return {\n                ...state,\n                cartItems: newCarts,\n                orderTotal: updateOrderTotal(newCarts),\n                cartItemsTotal: updateCartItemsCountTotal(newCarts)\n            }\n\n        default:\n            return state\n    }\n}*/\nimport { combineReducers } from \"redux\";\nimport { bookListReducer } from \"./bookListReducer\";\nimport { shoppingCartReducer } from \"./shoppingCartReducer\";\nexport const reducer = combineReducers({\n  bookList: bookListReducer,\n  shoppingCart: shoppingCartReducer\n});","map":{"version":3,"sources":["/home/user/Рабочий стол/redux-sandbox/src/reducers/index.js"],"names":["combineReducers","bookListReducer","shoppingCartReducer","reducer","bookList","shoppingCart"],"mappingseAAR,QAA8B,OAA9B;AACA,SAAQC,eAAR,QAA8B,mBAA9B;AACA,SAAQC,mBAAR,QAAkC,uBAAlC;AAEA,OAAO,MAAMC,OAAO,GAAGH,eAAe,CAAC;AACnCI,EAAAA,QAAQ,EAAEH,eADyB;AAEnCI,EAAAA,YAAY,EAAEH;AAFqB,CAAD,CAA/B","sourcesContent":["/*const initialState = {\n    books: [],\n    loading: true,\n    error: null,\n    cartItems: [],\n    orderTotal: 0,\n    cartItemsTotal: 0\n}\n\nconst updateCartItems = (cartItems, item, index) => {\n    if (index === -1) {\n        return [\n            ...cartItems,\n            item\n        ]\n    }\n    return [\n        ...cartItems.slice(0, index),\n        item.count > 0 && item,\n        ...cartItems.slice(++index)\n    ]\n}\n\nconst updateCartItem = (book, item = {}) => {\n    const {id = book.id, name = book.name, count = 0, total = 0} = item\n    return {\n        id,\n        name,\n        count: count + 1,\n        total: book.price + total,\n    }\n}\n\nconst updateOrderTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.total, 0)\n}\n\nconst updateCartItemsCountTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.count, 0)\n}*/\n\n/*export const reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case 'FETCH_BOOKS_SUCCESS' :\n            return {\n                ...state,\n                books: action.payload,\n                loading: false,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_REQUEST' :\n            return {\n                ...state,\n                books: [],\n                loading: true,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_FAILURE' :\n            return {\n                ...state,\n                books: [],\n                loading: false,\n                error: action.payload\n            }\n\n        case 'BOOK_ADDED_TO_CART' :\n            const ID = action.payload; // clicked id\n            const currentBook = state.books.find(book => book.id === ID) // book from list\n            const isBookInCartIndex = state.cartItems.findIndex(book => book.id === ID) // >0 || -1\n            const bookInCart = state.cartItems[isBookInCartIndex] // index || undefined\n            const data = updateCartItem(currentBook, bookInCart)\n            const newList = updateCartItems(state.cartItems, data, isBookInCartIndex)\n            return {\n                ...state,\n                cartItems: newList,\n                orderTotal: updateOrderTotal(newList),\n                cartItemsTotal: updateCartItemsCountTotal(newList)\n            }\n\n        case 'BOOKS_DELETED_FROM_CART' :\n            const booksID = action.payload; // clicked id\n            const newCartList = state.cartItems.filter(({id}) => id !== booksID);\n            return {\n                ...state,\n                cartItems: newCartList,\n                orderTotal: updateOrderTotal(newCartList),\n                cartItemsTotal: updateCartItemsCountTotal(newCartList)\n            }\n\n        case 'BOOK_DELETED_FROM_CART' :\n            const bookID = action.payload; // clicked id\n            let newCarts = [...state.cartItems]\n            const deletedBooksGroup = newCarts.find(({id}) => id === bookID)\n            const getCount = deletedBooksGroup.count - 1;\n            let getTotal;\n            if (getCount === 0) {\n                newCarts = newCarts.filter(({id}) => id !== bookID)\n            } else {\n                getTotal = deletedBooksGroup.total / deletedBooksGroup.count\n                deletedBooksGroup.count = getCount\n                deletedBooksGroup.total -= getTotal\n            }\n            return {\n                ...state,\n                cartItems: newCarts,\n                orderTotal: updateOrderTotal(newCarts),\n                cartItemsTotal: updateCartItemsCountTotal(newCarts)\n            }\n\n        default:\n            return state\n    }\n}*/\n\nimport {combineReducers} from \"redux\";\nimport {bookListReducer} from \"./bookListReducer\";\nimport {shoppingCartReducer} from \"./shoppingCartReducer\";\n\nexport const reducer = combineReducers({\n    bookList: bookListReducer,\n    shoppingCart: shoppingCartReducer\n})"]},"metadata":{},"sourceType":"module"}