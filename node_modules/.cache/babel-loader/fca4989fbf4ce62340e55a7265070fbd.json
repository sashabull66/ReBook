{"ast":null,"code":"/*const initialState = {\n    books: [],\n    loading: true,\n    error: null,\n    cartItems: [],\n    orderTotal: 0,\n    cartItemsTotal: 0\n}\n\nconst updateCartItems = (cartItems, item, index) => {\n    if (index === -1) {\n        return [\n            ...cartItems,\n            item\n        ]\n    }\n    return [\n        ...cartItems.slice(0, index),\n        item.count > 0 && item,\n        ...cartItems.slice(++index)\n    ]\n}\n\nconst updateCartItem = (book, item = {}) => {\n    const {id = book.id, name = book.name, count = 0, total = 0} = item\n    return {\n        id,\n        name,\n        count: count + 1,\n        total: book.price + total,\n    }\n}\n\nconst updateOrderTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.total, 0)\n}\n\nconst updateCartItemsCountTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.count, 0)\n}*/\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_SUCCESS':\n      return { ...state,\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_REQUEST':\n      return { ...state,\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return { ...state,\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'BOOK_ADDED_TO_CART':\n      const ID = action.payload; // clicked id\n\n      const currentBook = state.books.find(book => book.id === ID); // book from list\n\n      const isBookInCartIndex = state.cartItems.findIndex(book => book.id === ID); // >0 || -1\n\n      const bookInCart = state.cartItems[isBookInCartIndex]; // index || undefined\n\n      const data = updateCartItem(currentBook, bookInCart);\n      const newList = updateCartItems(state.cartItems, data, isBookInCartIndex);\n      return { ...state,\n        cartItems: newList,\n        orderTotal: updateOrderTotal(newList),\n        cartItemsTotal: updateCartItemsCountTotal(newList)\n      };\n\n    case 'BOOKS_DELETED_FROM_CART':\n      const booksID = action.payload; // clicked id\n\n      const newCartList = state.cartItems.filter(({\n        id\n      }) => id !== booksID);\n      return { ...state,\n        cartItems: newCartList,\n        orderTotal: updateOrderTotal(newCartList),\n        cartItemsTotal: updateCartItemsCountTotal(newCartList)\n      };\n\n    case 'BOOK_DELETED_FROM_CART':\n      const bookID = action.payload; // clicked id\n\n      let newCarts = [...state.cartItems];\n      const deletedBooksGroup = newCarts.find(({\n        id\n      }) => id === bookID);\n      const getCount = deletedBooksGroup.count - 1;\n      let getTotal;\n\n      if (getCount === 0) {\n        newCarts = newCarts.filter(({\n          id\n        }) => id !== bookID);\n      } else {\n        getTotal = deletedBooksGroup.total / deletedBooksGroup.count;\n        deletedBooksGroup.count = getCount;\n        deletedBooksGroup.total -= getTotal;\n      }\n\n      return { ...state,\n        cartItems: newCarts,\n        orderTotal: updateOrderTotal(newCarts),\n        cartItemsTotal: updateCartItemsCountTotal(newCarts)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/user/Рабочий стол/redux-sandbox/src/reducers/index.js"],"names":["reducer","state","initialState","action","type","books","payload","loading","error","ID","currentBook","find","book","id","isBookInCartIndex","cartItems","findIndex","bookInCart","data","updateCartItem","newList","updateCartItems","orderTotal","updateOrderTotal","cartItemsTotal","updateCartItemsCountTotal","booksID","newCartList","filter","bookID","newCarts","deletedBooksGroup","getCount","count","getTotal","total"],"mappings":"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","sourcesContent":["/*const initialState = {\n    books: [],\n    loading: true,\n    error: null,\n    cartItems: [],\n    orderTotal: 0,\n    cartItemsTotal: 0\n}\n\nconst updateCartItems = (cartItems, item, index) => {\n    if (index === -1) {\n        return [\n            ...cartItems,\n            item\n        ]\n    }\n    return [\n        ...cartItems.slice(0, index),\n        item.count > 0 && item,\n        ...cartItems.slice(++index)\n    ]\n}\n\nconst updateCartItem = (book, item = {}) => {\n    const {id = book.id, name = book.name, count = 0, total = 0} = item\n    return {\n        id,\n        name,\n        count: count + 1,\n        total: book.price + total,\n    }\n}\n\nconst updateOrderTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.total, 0)\n}\n\nconst updateCartItemsCountTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.count, 0)\n}*/\n\nexport const reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case 'FETCH_BOOKS_SUCCESS' :\n            return {\n                ...state,\n                books: action.payload,\n                loading: false,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_REQUEST' :\n            return {\n                ...state,\n                books: [],\n                loading: true,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_FAILURE' :\n            return {\n                ...state,\n                books: [],\n                loading: false,\n                error: action.payload\n            }\n\n        case 'BOOK_ADDED_TO_CART' :\n            const ID = action.payload; // clicked id\n            const currentBook = state.books.find(book => book.id === ID) // book from list\n            const isBookInCartIndex = state.cartItems.findIndex(book => book.id === ID) // >0 || -1\n            const bookInCart = state.cartItems[isBookInCartIndex] // index || undefined\n            const data = updateCartItem(currentBook, bookInCart)\n            const newList = updateCartItems(state.cartItems, data, isBookInCartIndex)\n            return {\n                ...state,\n                cartItems: newList,\n                orderTotal: updateOrderTotal(newList),\n                cartItemsTotal: updateCartItemsCountTotal(newList)\n            }\n\n        case 'BOOKS_DELETED_FROM_CART' :\n            const booksID = action.payload; // clicked id\n            const newCartList = state.cartItems.filter(({id}) => id !== booksID);\n            return {\n                ...state,\n                cartItems: newCartList,\n                orderTotal: updateOrderTotal(newCartList),\n                cartItemsTotal: updateCartItemsCountTotal(newCartList)\n            }\n\n        case 'BOOK_DELETED_FROM_CART' :\n            const bookID = action.payload; // clicked id\n            let newCarts = [...state.cartItems]\n            const deletedBooksGroup = newCarts.find(({id}) => id === bookID)\n            const getCount = deletedBooksGroup.count - 1;\n            let getTotal;\n            if (getCount === 0) {\n                newCarts = newCarts.filter(({id}) => id !== bookID)\n            } else {\n                getTotal = deletedBooksGroup.total / deletedBooksGroup.count\n                deletedBooksGroup.count = getCount\n                deletedBooksGroup.total -= getTotal\n            }\n            return {\n                ...state,\n                cartItems: newCarts,\n                orderTotal: updateOrderTotal(newCarts),\n                cartItemsTotal: updateCartItemsCountTotal(newCarts)\n            }\n\n        default:\n            return state\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}