{"ast":null,"code":"const shoppingCartInitialState = {\n  cartItems: [],\n  orderTotal: 0,\n  cartItemsTotal: 0\n};\n\nconst updateCartItems = (cartItems, item, index) => {\n  if (index === -1) {\n    return [...cartItems, item];\n  }\n\n  return [...cartItems.slice(0, index), item.count > 0 && item, ...cartItems.slice(++index)];\n};\n\nconst updateCartItem = (book, item = {}) => {\n  const {\n    id = book.id,\n    name = book.name,\n    count = 0,\n    total = 0\n  } = item;\n  return {\n    id,\n    name,\n    count: count + 1,\n    total: book.price + total\n  };\n};\n\nconst updateOrderTotal = cartItems => {\n  return cartItems.reduce((finish, element) => finish + element.total, 0);\n};\n\nconst updateCartItemsCountTotal = cartItems => {\n  return cartItems.reduce((finish, element) => finish + element.count, 0);\n};\n\nexport const shoppingCartReducer = (state = shoppingCartInitialState, action) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_SUCCESS':\n      return { ...state,\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_REQUEST':\n      return { ...state,\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return { ...state,\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/user/Рабочий стол/redux-sandbox/src/reducers/shoppingCartReducer.js"],"names":["shoppingCartInitialState","cartItems","orderTotal","cartItemsTotal","updateCartItems","item","index","slice","count","updateCartItem","book","id","name","total","price","updateOrderTotal","reduce","finish","element","updateCartItemsCountTotal","shoppingCartReducer","state","action","type","books","payload","loading","error"],"mappings":"AAAA,MAAMA,wBAAwB,GAAG;AAC7BC,EAAAA,SAAS,EAAE,EADkB;AAE7BC,EAAAA,UAAU,EAAE,CAFiB;AAG7BC,EAAAA,cAAc,EAAE;AAHa,CAAjC;;AAMA,MAAMC,eAAe,GAAG,CAACH,SAAD,EAAYI,IAAZ,EAAkBC,KAAlB,KAA4B;AAChD,MAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,WAAO,CACH,GAAGL,SADA,EAEHI,IAFG,CAAP;AAIH;;AACD,SAAO,CACH,GAAGJ,SAAS,CAACM,KAAV,CAAgB,CAAhB,EAAmBD,KAAnB,CADA,EAEHD,IAAI,CAACG,KAAL,GAAa,CAAb,IAAkBH,IAFf,EAGH,GAAGJ,SAAS,CAACM,KAAV,CAAgB,EAAED,KAAlB,CAHA,CAAP;AAKH,CAZD;;AAcA,MAAMG,cAAc,GAAG,CAACC,IAAD,EAAOL,IAAI,GAAG,EAAd,KAAqB;AACxC,QAAM;AAACM,IAAAA,EAAE,GAAGD,IAAI,CAACC,EAAX;AAAeC,IAAAA,IAAI,GAAGF,IAAI,CAACE,IAA3B;AAAiCJ,IAAAA,KAAK,GAAG,CAAzC;AAA4CK,IAAAA,KAAK,GAAG;AAApD,MAAyDR,IAA/D;AACA,SAAO;AACHM,IAAAA,EADG;AAEHC,IAAAA,IAFG;AAGHJ,IAAAA,KAAK,EAAEA,KAAK,GAAG,CAHZ;AAIHK,IAAAA,KAAK,EAAEH,IAAI,CAACI,KAAL,GAAaD;AAJjB,GAAP;AAMH,CARD;;AAUA,MAAME,gBAAgB,GAAId,SAAD,IAAe;AACpC,SAAOA,SAAS,CAACe,MAAV,CAAiB,CAACC,MAAD,EAASC,OAAT,KAAqBD,MAAM,GAAGC,OAAO,CAACL,KAAvD,EAA8D,CAA9D,CAAP;AACH,CAFD;;AAIA,MAAMM,yBAAyB,GAAIlB,SAAD,IAAe;AAC7C,SAAOA,SAAS,CAACe,MAAV,CAAiB,CAACC,MAAD,EAASC,OAAT,KAAqBD,MAAM,GAAGC,OAAO,CAACV,KAAvD,EAA8D,CAA9D,CAAP;AACH,CAFD;;AAIA,OAAO,MAAMY,mBAAmB,GAAG,CAACC,KAAK,GAAGrB,wBAAT,EAAmCsB,MAAnC,KAA8C;AAE7E,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,qBAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAEF,MAAM,CAACG,OAFX;AAGHC,QAAAA,OAAO,EAAE,KAHN;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAOJ,SAAK,qBAAL;AACI,aAAO,EACH,GAAGN,KADA;AAEHG,QAAAA,KAAK,EAAE,EAFJ;AAGHE,QAAAA,OAAO,EAAE,IAHN;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAOJ,SAAK,qBAAL;AACI,aAAO,EACH,GAAGN,KADA;AAEHG,QAAAA,KAAK,EAAE,EAFJ;AAGHE,QAAAA,OAAO,EAAE,KAHN;AAIHC,QAAAA,KAAK,EAAEL,MAAM,CAACG;AAJX,OAAP;;AAOJ;AAAS,aAAOJ,KAAP;AA1Bb;AA6BH,CA/BM","sourcesContent":["const shoppingCartInitialState = {\n    cartItems: [],\n    orderTotal: 0,\n    cartItemsTotal: 0\n}\n\nconst updateCartItems = (cartItems, item, index) => {\n    if (index === -1) {\n        return [\n            ...cartItems,\n            item\n        ]\n    }\n    return [\n        ...cartItems.slice(0, index),\n        item.count > 0 && item,\n        ...cartItems.slice(++index)\n    ]\n}\n\nconst updateCartItem = (book, item = {}) => {\n    const {id = book.id, name = book.name, count = 0, total = 0} = item\n    return {\n        id,\n        name,\n        count: count + 1,\n        total: book.price + total,\n    }\n}\n\nconst updateOrderTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.total, 0)\n}\n\nconst updateCartItemsCountTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.count, 0)\n}\n\nexport const shoppingCartReducer = (state = shoppingCartInitialState, action) => {\n\n    switch (action.type) {\n\n        case 'FETCH_BOOKS_SUCCESS' :\n            return {\n                ...state,\n                books: action.payload,\n                loading: false,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_REQUEST' :\n            return {\n                ...state,\n                books: [],\n                loading: true,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_FAILURE' :\n            return {\n                ...state,\n                books: [],\n                loading: false,\n                error: action.payload\n            }\n\n        default: return state\n\n    }\n}"]},"metadata":{},"sourceType":"module"}