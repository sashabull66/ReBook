{"ast":null,"code":"/*const initialState = {\n    bookList: {\n        books: [],\n        loading: true,\n        error: null,\n    },\n\n    shoppingCart: {\n        cartItems: [],\n        orderTotal: 0,\n        cartItemsTotal: 0\n    }\n}*/\nconst updateCartItems = (cartItems, item, index) => {\n  if (index === -1) {\n    return [...cartItems, item];\n  }\n\n  return [...cartItems.slice(0, index), item, ...cartItems.slice(++index)];\n};\n\nconst updateCartItem = (book, item = {}) => {\n  const {\n    id = book.id,\n    name = book.name,\n    count = 0,\n    total = 0\n  } = item;\n  return {\n    id,\n    name,\n    count: count + 1,\n    total: book.price + total\n  };\n};\n\nconst updateOrderTotal = cartItems => {\n  return cartItems.reduce((finish, element) => finish + element.total, 0);\n};\n\nconst updateCartItemsCountTotal = cartItems => {\n  return cartItems.reduce((finish, element) => finish + element.count, 0);\n};\n\nconst updateBookList = (state, action) => {\n  if (state === undefined) {\n    return {\n      books: [],\n      loading: true,\n      error: null\n    };\n  }\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_REQUEST':\n      return {\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state.bookList;\n  }\n};\n\nconst updateShoppingCart = (state, action) => {\n  if (state === undefined) {\n    return {\n      cartItems: [],\n      orderTotal: 0,\n      cartItemsTotal: 0\n    };\n  }\n\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART':\n      const {\n        bookList: {\n          books\n        },\n        shoppingCart: {\n          cartItems\n        }\n      } = state;\n      const ID = action.payload; // clicked id\n\n      const currentBook = books.find(book => book.id === ID); // book from list\n\n      const isBookInCartIndex = cartItems.findIndex(book => book.id === ID); // >0 || -1\n\n      const bookInCart = cartItems[isBookInCartIndex]; // index || undefined\n\n      const data = updateCartItem(currentBook, bookInCart);\n      const newList = updateCartItems(cartItems, data, isBookInCartIndex);\n      return {\n        cartItems: newList,\n        orderTotal: updateOrderTotal(newList),\n        cartItemsTotal: updateCartItemsCountTotal(newList)\n      };\n\n    case 'BOOKS_DELETED_FROM_CART':\n      const booksID = action.payload; // clicked id\n\n      const newCartList = state.shoppingCart.cartItems.filter(({\n        id\n      }) => id !== booksID);\n      return {\n        cartItems: newCartList,\n        orderTotal: updateOrderTotal(newCartList),\n        cartItemsTotal: updateCartItemsCountTotal(newCartList)\n      };\n\n    case 'BOOK_DELETED_FROM_CART':\n      const bookID = action.payload; // clicked id\n\n      let newCarts = [...state.shoppingCart.cartItems];\n      const deletedBooksGroup = newCarts.find(({\n        id\n      }) => id === bookID);\n      const getCount = deletedBooksGroup.count - 1;\n      let getTotal;\n\n      if (getCount === 0) {\n        newCarts = newCarts.filter(({\n          id\n        }) => id !== bookID);\n      } else {\n        getTotal = deletedBooksGroup.total / deletedBooksGroup.count;\n        deletedBooksGroup.count = getCount;\n        deletedBooksGroup.total -= getTotal;\n      }\n\n      return {\n        cartItems: newCarts,\n        orderTotal: updateOrderTotal(newCarts),\n        cartItemsTotal: updateCartItemsCountTotal(newCarts)\n      };\n\n    default:\n      return state.shoppingCart;\n  }\n};\n\nexport const reducer = (state, action) => {\n  return {\n    bookList: updateBookList(state, action),\n    shoppingCart: updateShoppingCart(state, action)\n  };\n};","map":{"version":3,"sources":["/home/user/Рабочий стол/redux-sandbox/src/reducers/index.js"],"names":["updateCartItems","cartItems","item","index","slice","updateCartItem","book","id","name","count","total","price","updateOrderTotal","reduce","finish","element","updateCartItemsCountTotal","updateBookList","state","action","undefined","books","loading","error","type","payload","bookList","updateShoppingCart","orderTotal","cartItemsTotal","shoppingCart","ID","currentBook","find","isBookInCartIndex","findIndex","bookInCart","data","newList","booksID","newCartList","filter","bookID","newCarts","deletedBooksGroup","getCount","getTotal","reducer"],"mappings":"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","sourcesContent":["/*const initialState = {\n    bookList: {\n        books: [],\n        loading: true,\n        error: null,\n    },\n\n    shoppingCart: {\n        cartItems: [],\n        orderTotal: 0,\n        cartItemsTotal: 0\n    }\n}*/\n\nconst updateCartItems = (cartItems, item, index) => {\n    if (index === -1) {\n        return [\n            ...cartItems,\n            item\n        ]\n    }\n    return [\n        ...cartItems.slice(0, index),\n        item,\n        ...cartItems.slice(++index)\n    ]\n}\nconst updateCartItem = (book, item = {}) => {\n    const {id = book.id, name = book.name, count = 0, total = 0} = item\n    return {\n        id,\n        name,\n        count: count + 1,\n        total: book.price + total,\n    }\n}\nconst updateOrderTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.total, 0)\n}\nconst updateCartItemsCountTotal = (cartItems) => {\n    return cartItems.reduce((finish, element) => finish + element.count, 0)\n}\n\nconst updateBookList = (state, action) => {\n    if (state === undefined) {\n        return {\n            books: [],\n            loading: true,\n            error: null,\n        }\n    }\n    switch (action.type) {\n        case 'FETCH_BOOKS_SUCCESS' :\n            return {\n                books: action.payload,\n                loading: false,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_REQUEST' :\n            return {\n                books: [],\n                loading: true,\n                error: null\n            }\n\n        case 'FETCH_BOOKS_FAILURE' :\n            return {\n                books: [],\n                loading: false,\n                error: action.payload\n            }\n\n        default:\n            return state.bookList\n    }\n}\nconst updateShoppingCart = (state, action) => {\n    if (state === undefined) {\n        return {\n            cartItems: [],\n            orderTotal: 0,\n            cartItemsTotal: 0\n        }\n    }\n\n    switch (action.type) {\n        case 'BOOK_ADDED_TO_CART' :\n            const {bookList: {books}, shoppingCart: {cartItems}} = state\n            const ID = action.payload; // clicked id\n            const currentBook = books.find(book => book.id === ID) // book from list\n            const isBookInCartIndex = cartItems.findIndex(book => book.id === ID) // >0 || -1\n            const bookInCart = cartItems[isBookInCartIndex] // index || undefined\n            const data = updateCartItem(currentBook, bookInCart)\n            const newList = updateCartItems(cartItems, data, isBookInCartIndex)\n            return {\n                cartItems: newList,\n                orderTotal: updateOrderTotal(newList),\n                cartItemsTotal: updateCartItemsCountTotal(newList)\n            }\n\n        case 'BOOKS_DELETED_FROM_CART' :\n            const booksID = action.payload; // clicked id\n            const newCartList = state.shoppingCart.cartItems.filter(({id}) => id !== booksID);\n            return {\n                cartItems: newCartList,\n                orderTotal: updateOrderTotal(newCartList),\n                cartItemsTotal: updateCartItemsCountTotal(newCartList)\n            }\n\n        case 'BOOK_DELETED_FROM_CART' :\n            const bookID = action.payload; // clicked id\n            let newCarts = [...state.shoppingCart.cartItems]\n            const deletedBooksGroup = newCarts.find(({id}) => id === bookID)\n            const getCount = deletedBooksGroup.count - 1;\n            let getTotal;\n            if (getCount === 0) {\n                newCarts = newCarts.filter(({id}) => id !== bookID)\n            } else {\n                getTotal = deletedBooksGroup.total / deletedBooksGroup.count\n                deletedBooksGroup.count = getCount\n                deletedBooksGroup.total -= getTotal\n            }\n            return {\n                cartItems: newCarts,\n                orderTotal: updateOrderTotal(newCarts),\n                cartItemsTotal: updateCartItemsCountTotal(newCarts)\n            }\n\n        default :\n            return state.shoppingCart\n    }\n}\n\nexport const reducer = (state, action) => {\n\n    return {\n        bookList: updateBookList(state, action),\n        shoppingCart: updateShoppingCart(state, action)\n    }\n\n}"]},"metadata":{},"sourceType":"module"}